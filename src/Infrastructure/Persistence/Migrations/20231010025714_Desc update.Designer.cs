// <auto-generated />
using System;
using Bookstore.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20231010025714_Desc update")]
    partial class Descupdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookstore.Domain.Entities.Book", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("d278f43f-6157-4f71-9eaa-d775f9162f31")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("author");

                    b.Property<bool>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("available");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("descriptiion");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("image_path");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("image_url");

                    b.Property<decimal>("Price")
                        .HasMaxLength(20)
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("YearPublished")
                        .IsRequired()
                        .HasColumnType("DATETIME")
                        .HasColumnName("year_published");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("5ef3a45d-2729-4d4f-b50e-490312094e03")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("image_path");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("phone_number")
                        .IsFixedLength();

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(1)
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "26aae3fc-596f-42da-bdb6-f1f266ef127a",
                            Email = "rajin@gmail.com",
                            FirstName = "Rajin",
                            IsDeleted = false,
                            LastName = "Maharjan",
                            PasswordHash = "$2a$11$7H6tBd8/SKM9ph32/BnnzOjle6F7j1elEnDnRkfwZfBxB8WRgFiu.",
                            PhoneNumber = "1234567800",
                            Role = 0
                        },
                        new
                        {
                            Id = "60ca2526-2ef7-429c-a0cb-7d684a876a88",
                            Email = "gagan@gmail.com",
                            FirstName = "Gagan",
                            IsDeleted = false,
                            LastName = "Maharjan",
                            PasswordHash = "$2a$11$eT7L1653gRyhjYANt8opEeM0QHx0/MsDzNJB/PtHNxxM.FncIvOK6",
                            PhoneNumber = "1134567890",
                            Role = 1
                        },
                        new
                        {
                            Id = "2cb167d6-fb93-4088-b993-6f24d4e735d0",
                            Email = "milan@gmail.com",
                            FirstName = "Milan",
                            IsDeleted = false,
                            LastName = "Maharjan",
                            PasswordHash = "$2a$11$cdpEy6z8shN2aBE4aZ2S8Oi2S1by78fgMqAdBPwEZNqZRjzHmBV5S",
                            PhoneNumber = "1234567890",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.Book", b =>
                {
                    b.HasOne("Bookstore.Domain.Entities.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookstore.Domain.Entities.User", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
